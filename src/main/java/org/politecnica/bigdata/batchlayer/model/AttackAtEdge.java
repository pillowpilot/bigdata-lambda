/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.politecnica.bigdata.batchlayer.model;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked", "unused" })
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-10-02")
public class AttackAtEdge implements org.apache.thrift.TBase<AttackAtEdge, AttackAtEdge._Fields>, java.io.Serializable,
		Cloneable, Comparable<AttackAtEdge> {
	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"AttackAtEdge");

	private static final org.apache.thrift.protocol.TField ATTACK_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"attack", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
	private static final org.apache.thrift.protocol.TField LOCATION_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"location", org.apache.thrift.protocol.TType.STRUCT, (short) 2);

	private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new AttackAtEdgeStandardSchemeFactory();
	private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new AttackAtEdgeTupleSchemeFactory();

	public AttackID attack; // required
	public LocationID location; // required

	/**
	 * The set of fields this struct contains, along with convenience methods for
	 * finding and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		ATTACK((short) 1, "attack"), LOCATION((short) 2, "location");

		private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

		static {
			for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // ATTACK
				return ATTACK;
			case 2: // LOCATION
				return LOCATION;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception if it
		 * is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		public static _Fields findByName(java.lang.String name) {
			return byName.get(name);
		}

		private final short _thriftId;
		private final java.lang.String _fieldName;

		_Fields(short thriftId, java.lang.String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public java.lang.String getFieldName() {
			return _fieldName;
		}
	}

	// isset id assignments
	public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.ATTACK,
				new org.apache.thrift.meta_data.FieldMetaData("attack",
						org.apache.thrift.TFieldRequirementType.REQUIRED,
						new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
								AttackID.class)));
		tmpMap.put(_Fields.LOCATION,
				new org.apache.thrift.meta_data.FieldMetaData("location",
						org.apache.thrift.TFieldRequirementType.REQUIRED,
						new org.apache.thrift.meta_data.StructMetaData(org.apache.thrift.protocol.TType.STRUCT,
								LocationID.class)));
		metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(AttackAtEdge.class, metaDataMap);
	}

	public AttackAtEdge() {
	}

	public AttackAtEdge(AttackID attack, LocationID location) {
		this();
		this.attack = attack;
		this.location = location;
	}

	/**
	 * Performs a deep copy on <i>other</i>.
	 */
	public AttackAtEdge(AttackAtEdge other) {
		if (other.isSetAttack()) {
			this.attack = new AttackID(other.attack);
		}
		if (other.isSetLocation()) {
			this.location = new LocationID(other.location);
		}
	}

	public AttackAtEdge deepCopy() {
		return new AttackAtEdge(this);
	}

	@Override
	public void clear() {
		this.attack = null;
		this.location = null;
	}

	public AttackID getAttack() {
		return this.attack;
	}

	public AttackAtEdge setAttack(AttackID attack) {
		this.attack = attack;
		return this;
	}

	public void unsetAttack() {
		this.attack = null;
	}

	/**
	 * Returns true if field attack is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetAttack() {
		return this.attack != null;
	}

	public void setAttackIsSet(boolean value) {
		if (!value) {
			this.attack = null;
		}
	}

	public LocationID getLocation() {
		return this.location;
	}

	public AttackAtEdge setLocation(LocationID location) {
		this.location = location;
		return this;
	}

	public void unsetLocation() {
		this.location = null;
	}

	/**
	 * Returns true if field location is set (has been assigned a value) and false
	 * otherwise
	 */
	public boolean isSetLocation() {
		return this.location != null;
	}

	public void setLocationIsSet(boolean value) {
		if (!value) {
			this.location = null;
		}
	}

	public void setFieldValue(_Fields field, java.lang.Object value) {
		switch (field) {
		case ATTACK:
			if (value == null) {
				unsetAttack();
			} else {
				setAttack((AttackID) value);
			}
			break;

		case LOCATION:
			if (value == null) {
				unsetLocation();
			} else {
				setLocation((LocationID) value);
			}
			break;

		}
	}

	public java.lang.Object getFieldValue(_Fields field) {
		switch (field) {
		case ATTACK:
			return getAttack();

		case LOCATION:
			return getLocation();

		}
		throw new java.lang.IllegalStateException();
	}

	/**
	 * Returns true if field corresponding to fieldID is set (has been assigned a
	 * value) and false otherwise
	 */
	public boolean isSet(_Fields field) {
		if (field == null) {
			throw new java.lang.IllegalArgumentException();
		}

		switch (field) {
		case ATTACK:
			return isSetAttack();
		case LOCATION:
			return isSetLocation();
		}
		throw new java.lang.IllegalStateException();
	}

	@Override
	public boolean equals(java.lang.Object that) {
		if (that == null)
			return false;
		if (that instanceof AttackAtEdge)
			return this.equals((AttackAtEdge) that);
		return false;
	}

	public boolean equals(AttackAtEdge that) {
		if (that == null)
			return false;
		if (this == that)
			return true;

		boolean this_present_attack = true && this.isSetAttack();
		boolean that_present_attack = true && that.isSetAttack();
		if (this_present_attack || that_present_attack) {
			if (!(this_present_attack && that_present_attack))
				return false;
			if (!this.attack.equals(that.attack))
				return false;
		}

		boolean this_present_location = true && this.isSetLocation();
		boolean that_present_location = true && that.isSetLocation();
		if (this_present_location || that_present_location) {
			if (!(this_present_location && that_present_location))
				return false;
			if (!this.location.equals(that.location))
				return false;
		}

		return true;
	}

	@Override
	public int hashCode() {
		int hashCode = 1;

		hashCode = hashCode * 8191 + ((isSetAttack()) ? 131071 : 524287);
		if (isSetAttack())
			hashCode = hashCode * 8191 + attack.hashCode();

		hashCode = hashCode * 8191 + ((isSetLocation()) ? 131071 : 524287);
		if (isSetLocation())
			hashCode = hashCode * 8191 + location.hashCode();

		return hashCode;
	}

	@Override
	public int compareTo(AttackAtEdge other) {
		if (!getClass().equals(other.getClass())) {
			return getClass().getName().compareTo(other.getClass().getName());
		}

		int lastComparison = 0;

		lastComparison = java.lang.Boolean.valueOf(isSetAttack()).compareTo(other.isSetAttack());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetAttack()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.attack, other.attack);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		lastComparison = java.lang.Boolean.valueOf(isSetLocation()).compareTo(other.isSetLocation());
		if (lastComparison != 0) {
			return lastComparison;
		}
		if (isSetLocation()) {
			lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.location, other.location);
			if (lastComparison != 0) {
				return lastComparison;
			}
		}
		return 0;
	}

	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
		scheme(iprot).read(iprot, this);
	}

	public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
		scheme(oprot).write(oprot, this);
	}

	@Override
	public java.lang.String toString() {
		java.lang.StringBuilder sb = new java.lang.StringBuilder("AttackAtEdge(");
		boolean first = true;

		sb.append("attack:");
		if (this.attack == null) {
			sb.append("null");
		} else {
			sb.append(this.attack);
		}
		first = false;
		if (!first)
			sb.append(", ");
		sb.append("location:");
		if (this.location == null) {
			sb.append("null");
		} else {
			sb.append(this.location);
		}
		first = false;
		sb.append(")");
		return sb.toString();
	}

	public void validate() throws org.apache.thrift.TException {
		// check for required fields
		if (attack == null) {
			throw new org.apache.thrift.protocol.TProtocolException(
					"Required field 'attack' was not present! Struct: " + toString());
		}
		if (location == null) {
			throw new org.apache.thrift.protocol.TProtocolException(
					"Required field 'location' was not present! Struct: " + toString());
		}
		// check for sub-struct validity
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
		try {
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private static class AttackAtEdgeStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
		public AttackAtEdgeStandardScheme getScheme() {
			return new AttackAtEdgeStandardScheme();
		}
	}

	private static class AttackAtEdgeStandardScheme extends org.apache.thrift.scheme.StandardScheme<AttackAtEdge> {

		public void read(org.apache.thrift.protocol.TProtocol iprot, AttackAtEdge struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TField schemeField;
			iprot.readStructBegin();
			while (true) {
				schemeField = iprot.readFieldBegin();
				if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
					break;
				}
				switch (schemeField.id) {
				case 1: // ATTACK
					if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
						struct.attack = new AttackID();
						struct.attack.read(iprot);
						struct.setAttackIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				case 2: // LOCATION
					if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
						struct.location = new LocationID();
						struct.location.read(iprot);
						struct.setLocationIsSet(true);
					} else {
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					break;
				default:
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
				}
				iprot.readFieldEnd();
			}
			iprot.readStructEnd();

			// check for required fields of primitive type, which can't be checked in the
			// validate method
			struct.validate();
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot, AttackAtEdge struct)
				throws org.apache.thrift.TException {
			struct.validate();

			oprot.writeStructBegin(STRUCT_DESC);
			if (struct.attack != null) {
				oprot.writeFieldBegin(ATTACK_FIELD_DESC);
				struct.attack.write(oprot);
				oprot.writeFieldEnd();
			}
			if (struct.location != null) {
				oprot.writeFieldBegin(LOCATION_FIELD_DESC);
				struct.location.write(oprot);
				oprot.writeFieldEnd();
			}
			oprot.writeFieldStop();
			oprot.writeStructEnd();
		}

	}

	private static class AttackAtEdgeTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
		public AttackAtEdgeTupleScheme getScheme() {
			return new AttackAtEdgeTupleScheme();
		}
	}

	private static class AttackAtEdgeTupleScheme extends org.apache.thrift.scheme.TupleScheme<AttackAtEdge> {

		@Override
		public void write(org.apache.thrift.protocol.TProtocol prot, AttackAtEdge struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			struct.attack.write(oprot);
			struct.location.write(oprot);
		}

		@Override
		public void read(org.apache.thrift.protocol.TProtocol prot, AttackAtEdge struct)
				throws org.apache.thrift.TException {
			org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			struct.attack = new AttackID();
			struct.attack.read(iprot);
			struct.setAttackIsSet(true);
			struct.location = new LocationID();
			struct.location.read(iprot);
			struct.setLocationIsSet(true);
		}
	}

	private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
		return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
				: TUPLE_SCHEME_FACTORY).getScheme();
	}
}
