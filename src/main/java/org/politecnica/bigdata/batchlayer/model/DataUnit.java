/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.politecnica.bigdata.batchlayer.model;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked", "unused" })
public class DataUnit extends org.apache.thrift.TUnion<DataUnit, DataUnit._Fields> {
	private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
			"DataUnit");
	private static final org.apache.thrift.protocol.TField ATTACK_PROPERTY_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"attack_property", org.apache.thrift.protocol.TType.STRUCT, (short) 1);
	private static final org.apache.thrift.protocol.TField WEAPON_PROPERTY_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"weapon_property", org.apache.thrift.protocol.TType.STRUCT, (short) 2);
	private static final org.apache.thrift.protocol.TField LOCATION_PROPERTY_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"location_property", org.apache.thrift.protocol.TType.STRUCT, (short) 3);
	private static final org.apache.thrift.protocol.TField ATTACK_AT_EDGE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"attack_at_edge", org.apache.thrift.protocol.TType.STRUCT, (short) 4);
	private static final org.apache.thrift.protocol.TField WEAPON_USED_EDGE_FIELD_DESC = new org.apache.thrift.protocol.TField(
			"weapon_used_edge", org.apache.thrift.protocol.TType.STRUCT, (short) 5);

	/**
	 * The set of fields this struct contains, along with convenience methods for
	 * finding and manipulating them.
	 */
	public enum _Fields implements org.apache.thrift.TFieldIdEnum {
		ATTACK_PROPERTY((short) 1, "attack_property"), WEAPON_PROPERTY((short) 2, "weapon_property"),
		LOCATION_PROPERTY((short) 3, "location_property"), ATTACK_AT_EDGE((short) 4, "attack_at_edge"),
		WEAPON_USED_EDGE((short) 5, "weapon_used_edge");

		private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

		static {
			for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
				byName.put(field.getFieldName(), field);
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, or null if its not found.
		 */
		public static _Fields findByThriftId(int fieldId) {
			switch (fieldId) {
			case 1: // ATTACK_PROPERTY
				return ATTACK_PROPERTY;
			case 2: // WEAPON_PROPERTY
				return WEAPON_PROPERTY;
			case 3: // LOCATION_PROPERTY
				return LOCATION_PROPERTY;
			case 4: // ATTACK_AT_EDGE
				return ATTACK_AT_EDGE;
			case 5: // WEAPON_USED_EDGE
				return WEAPON_USED_EDGE;
			default:
				return null;
			}
		}

		/**
		 * Find the _Fields constant that matches fieldId, throwing an exception if it
		 * is not found.
		 */
		public static _Fields findByThriftIdOrThrow(int fieldId) {
			_Fields fields = findByThriftId(fieldId);
			if (fields == null)
				throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
			return fields;
		}

		/**
		 * Find the _Fields constant that matches name, or null if its not found.
		 */
		public static _Fields findByName(java.lang.String name) {
			return byName.get(name);
		}

		private final short _thriftId;
		private final java.lang.String _fieldName;

		_Fields(short thriftId, java.lang.String fieldName) {
			_thriftId = thriftId;
			_fieldName = fieldName;
		}

		public short getThriftFieldId() {
			return _thriftId;
		}

		public java.lang.String getFieldName() {
			return _fieldName;
		}
	}

	public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
	static {
		java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
				_Fields.class);
		tmpMap.put(_Fields.ATTACK_PROPERTY,
				new org.apache.thrift.meta_data.FieldMetaData("attack_property",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
								"AttackProperty")));
		tmpMap.put(_Fields.WEAPON_PROPERTY,
				new org.apache.thrift.meta_data.FieldMetaData("weapon_property",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
								"WeaponProperty")));
		tmpMap.put(_Fields.LOCATION_PROPERTY,
				new org.apache.thrift.meta_data.FieldMetaData("location_property",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
								"LocationProperty")));
		tmpMap.put(_Fields.ATTACK_AT_EDGE,
				new org.apache.thrift.meta_data.FieldMetaData("attack_at_edge",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
								"AttackAtEdge")));
		tmpMap.put(_Fields.WEAPON_USED_EDGE,
				new org.apache.thrift.meta_data.FieldMetaData("weapon_used_edge",
						org.apache.thrift.TFieldRequirementType.OPTIONAL,
						new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT,
								"WeaponUsedEdge")));
		metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
		org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(DataUnit.class, metaDataMap);
	}

	public DataUnit() {
		super();
	}

	public DataUnit(_Fields setField, java.lang.Object value) {
		super(setField, value);
	}

	public DataUnit(DataUnit other) {
		super(other);
	}

	public DataUnit deepCopy() {
		return new DataUnit(this);
	}

	public static DataUnit attack_property(AttackProperty value) {
		DataUnit x = new DataUnit();
		x.setAttack_property(value);
		return x;
	}

	public static DataUnit weapon_property(WeaponProperty value) {
		DataUnit x = new DataUnit();
		x.setWeapon_property(value);
		return x;
	}

	public static DataUnit location_property(LocationProperty value) {
		DataUnit x = new DataUnit();
		x.setLocation_property(value);
		return x;
	}

	public static DataUnit attack_at_edge(AttackAtEdge value) {
		DataUnit x = new DataUnit();
		x.setAttack_at_edge(value);
		return x;
	}

	public static DataUnit weapon_used_edge(WeaponUsedEdge value) {
		DataUnit x = new DataUnit();
		x.setWeapon_used_edge(value);
		return x;
	}

	@Override
	protected void checkType(_Fields setField, java.lang.Object value) throws java.lang.ClassCastException {
		switch (setField) {
		case ATTACK_PROPERTY:
			if (value instanceof AttackProperty) {
				break;
			}
			throw new java.lang.ClassCastException(
					"Was expecting value of type AttackProperty for field 'attack_property', but got "
							+ value.getClass().getSimpleName());
		case WEAPON_PROPERTY:
			if (value instanceof WeaponProperty) {
				break;
			}
			throw new java.lang.ClassCastException(
					"Was expecting value of type WeaponProperty for field 'weapon_property', but got "
							+ value.getClass().getSimpleName());
		case LOCATION_PROPERTY:
			if (value instanceof LocationProperty) {
				break;
			}
			throw new java.lang.ClassCastException(
					"Was expecting value of type LocationProperty for field 'location_property', but got "
							+ value.getClass().getSimpleName());
		case ATTACK_AT_EDGE:
			if (value instanceof AttackAtEdge) {
				break;
			}
			throw new java.lang.ClassCastException(
					"Was expecting value of type AttackAtEdge for field 'attack_at_edge', but got "
							+ value.getClass().getSimpleName());
		case WEAPON_USED_EDGE:
			if (value instanceof WeaponUsedEdge) {
				break;
			}
			throw new java.lang.ClassCastException(
					"Was expecting value of type WeaponUsedEdge for field 'weapon_used_edge', but got "
							+ value.getClass().getSimpleName());
		default:
			throw new java.lang.IllegalArgumentException("Unknown field id " + setField);
		}
	}

	@Override
	protected java.lang.Object standardSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot,
			org.apache.thrift.protocol.TField field) throws org.apache.thrift.TException {
		_Fields setField = _Fields.findByThriftId(field.id);
		if (setField != null) {
			switch (setField) {
			case ATTACK_PROPERTY:
				if (field.type == ATTACK_PROPERTY_FIELD_DESC.type) {
					AttackProperty attack_property;
					attack_property = new AttackProperty();
					attack_property.read(iprot);
					return attack_property;
				} else {
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
					return null;
				}
			case WEAPON_PROPERTY:
				if (field.type == WEAPON_PROPERTY_FIELD_DESC.type) {
					WeaponProperty weapon_property;
					weapon_property = new WeaponProperty();
					weapon_property.read(iprot);
					return weapon_property;
				} else {
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
					return null;
				}
			case LOCATION_PROPERTY:
				if (field.type == LOCATION_PROPERTY_FIELD_DESC.type) {
					LocationProperty location_property;
					location_property = new LocationProperty();
					location_property.read(iprot);
					return location_property;
				} else {
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
					return null;
				}
			case ATTACK_AT_EDGE:
				if (field.type == ATTACK_AT_EDGE_FIELD_DESC.type) {
					AttackAtEdge attack_at_edge;
					attack_at_edge = new AttackAtEdge();
					attack_at_edge.read(iprot);
					return attack_at_edge;
				} else {
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
					return null;
				}
			case WEAPON_USED_EDGE:
				if (field.type == WEAPON_USED_EDGE_FIELD_DESC.type) {
					WeaponUsedEdge weapon_used_edge;
					weapon_used_edge = new WeaponUsedEdge();
					weapon_used_edge.read(iprot);
					return weapon_used_edge;
				} else {
					org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
					return null;
				}
			default:
				throw new java.lang.IllegalStateException(
						"setField wasn't null, but didn't match any of the case statements!");
			}
		} else {
			org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
			return null;
		}
	}

	@Override
	protected void standardSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot)
			throws org.apache.thrift.TException {
		switch (setField_) {
		case ATTACK_PROPERTY:
			AttackProperty attack_property = (AttackProperty) value_;
			attack_property.write(oprot);
			return;
		case WEAPON_PROPERTY:
			WeaponProperty weapon_property = (WeaponProperty) value_;
			weapon_property.write(oprot);
			return;
		case LOCATION_PROPERTY:
			LocationProperty location_property = (LocationProperty) value_;
			location_property.write(oprot);
			return;
		case ATTACK_AT_EDGE:
			AttackAtEdge attack_at_edge = (AttackAtEdge) value_;
			attack_at_edge.write(oprot);
			return;
		case WEAPON_USED_EDGE:
			WeaponUsedEdge weapon_used_edge = (WeaponUsedEdge) value_;
			weapon_used_edge.write(oprot);
			return;
		default:
			throw new java.lang.IllegalStateException("Cannot write union with unknown field " + setField_);
		}
	}

	@Override
	protected java.lang.Object tupleSchemeReadValue(org.apache.thrift.protocol.TProtocol iprot, short fieldID)
			throws org.apache.thrift.TException {
		_Fields setField = _Fields.findByThriftId(fieldID);
		if (setField != null) {
			switch (setField) {
			case ATTACK_PROPERTY:
				AttackProperty attack_property;
				attack_property = new AttackProperty();
				attack_property.read(iprot);
				return attack_property;
			case WEAPON_PROPERTY:
				WeaponProperty weapon_property;
				weapon_property = new WeaponProperty();
				weapon_property.read(iprot);
				return weapon_property;
			case LOCATION_PROPERTY:
				LocationProperty location_property;
				location_property = new LocationProperty();
				location_property.read(iprot);
				return location_property;
			case ATTACK_AT_EDGE:
				AttackAtEdge attack_at_edge;
				attack_at_edge = new AttackAtEdge();
				attack_at_edge.read(iprot);
				return attack_at_edge;
			case WEAPON_USED_EDGE:
				WeaponUsedEdge weapon_used_edge;
				weapon_used_edge = new WeaponUsedEdge();
				weapon_used_edge.read(iprot);
				return weapon_used_edge;
			default:
				throw new java.lang.IllegalStateException(
						"setField wasn't null, but didn't match any of the case statements!");
			}
		} else {
			throw new org.apache.thrift.protocol.TProtocolException("Couldn't find a field with field id " + fieldID);
		}
	}

	@Override
	protected void tupleSchemeWriteValue(org.apache.thrift.protocol.TProtocol oprot)
			throws org.apache.thrift.TException {
		switch (setField_) {
		case ATTACK_PROPERTY:
			AttackProperty attack_property = (AttackProperty) value_;
			attack_property.write(oprot);
			return;
		case WEAPON_PROPERTY:
			WeaponProperty weapon_property = (WeaponProperty) value_;
			weapon_property.write(oprot);
			return;
		case LOCATION_PROPERTY:
			LocationProperty location_property = (LocationProperty) value_;
			location_property.write(oprot);
			return;
		case ATTACK_AT_EDGE:
			AttackAtEdge attack_at_edge = (AttackAtEdge) value_;
			attack_at_edge.write(oprot);
			return;
		case WEAPON_USED_EDGE:
			WeaponUsedEdge weapon_used_edge = (WeaponUsedEdge) value_;
			weapon_used_edge.write(oprot);
			return;
		default:
			throw new java.lang.IllegalStateException("Cannot write union with unknown field " + setField_);
		}
	}

	@Override
	protected org.apache.thrift.protocol.TField getFieldDesc(_Fields setField) {
		switch (setField) {
		case ATTACK_PROPERTY:
			return ATTACK_PROPERTY_FIELD_DESC;
		case WEAPON_PROPERTY:
			return WEAPON_PROPERTY_FIELD_DESC;
		case LOCATION_PROPERTY:
			return LOCATION_PROPERTY_FIELD_DESC;
		case ATTACK_AT_EDGE:
			return ATTACK_AT_EDGE_FIELD_DESC;
		case WEAPON_USED_EDGE:
			return WEAPON_USED_EDGE_FIELD_DESC;
		default:
			throw new java.lang.IllegalArgumentException("Unknown field id " + setField);
		}
	}

	@Override
	protected org.apache.thrift.protocol.TStruct getStructDesc() {
		return STRUCT_DESC;
	}

	@Override
	protected _Fields enumForId(short id) {
		return _Fields.findByThriftIdOrThrow(id);
	}

	public _Fields fieldForId(int fieldId) {
		return _Fields.findByThriftId(fieldId);
	}

	public AttackProperty getAttack_property() {
		if (getSetField() == _Fields.ATTACK_PROPERTY) {
			return (AttackProperty) getFieldValue();
		} else {
			throw new java.lang.RuntimeException("Cannot get field 'attack_property' because union is currently set to "
					+ getFieldDesc(getSetField()).name);
		}
	}

	public void setAttack_property(AttackProperty value) {
		if (value == null)
			throw new java.lang.NullPointerException();
		setField_ = _Fields.ATTACK_PROPERTY;
		value_ = value;
	}

	public WeaponProperty getWeapon_property() {
		if (getSetField() == _Fields.WEAPON_PROPERTY) {
			return (WeaponProperty) getFieldValue();
		} else {
			throw new java.lang.RuntimeException("Cannot get field 'weapon_property' because union is currently set to "
					+ getFieldDesc(getSetField()).name);
		}
	}

	public void setWeapon_property(WeaponProperty value) {
		if (value == null)
			throw new java.lang.NullPointerException();
		setField_ = _Fields.WEAPON_PROPERTY;
		value_ = value;
	}

	public LocationProperty getLocation_property() {
		if (getSetField() == _Fields.LOCATION_PROPERTY) {
			return (LocationProperty) getFieldValue();
		} else {
			throw new java.lang.RuntimeException(
					"Cannot get field 'location_property' because union is currently set to "
							+ getFieldDesc(getSetField()).name);
		}
	}

	public void setLocation_property(LocationProperty value) {
		if (value == null)
			throw new java.lang.NullPointerException();
		setField_ = _Fields.LOCATION_PROPERTY;
		value_ = value;
	}

	public AttackAtEdge getAttack_at_edge() {
		if (getSetField() == _Fields.ATTACK_AT_EDGE) {
			return (AttackAtEdge) getFieldValue();
		} else {
			throw new java.lang.RuntimeException("Cannot get field 'attack_at_edge' because union is currently set to "
					+ getFieldDesc(getSetField()).name);
		}
	}

	public void setAttack_at_edge(AttackAtEdge value) {
		if (value == null)
			throw new java.lang.NullPointerException();
		setField_ = _Fields.ATTACK_AT_EDGE;
		value_ = value;
	}

	public WeaponUsedEdge getWeapon_used_edge() {
		if (getSetField() == _Fields.WEAPON_USED_EDGE) {
			return (WeaponUsedEdge) getFieldValue();
		} else {
			throw new java.lang.RuntimeException(
					"Cannot get field 'weapon_used_edge' because union is currently set to "
							+ getFieldDesc(getSetField()).name);
		}
	}

	public void setWeapon_used_edge(WeaponUsedEdge value) {
		if (value == null)
			throw new java.lang.NullPointerException();
		setField_ = _Fields.WEAPON_USED_EDGE;
		value_ = value;
	}

	public boolean isSetAttack_property() {
		return setField_ == _Fields.ATTACK_PROPERTY;
	}

	public boolean isSetWeapon_property() {
		return setField_ == _Fields.WEAPON_PROPERTY;
	}

	public boolean isSetLocation_property() {
		return setField_ == _Fields.LOCATION_PROPERTY;
	}

	public boolean isSetAttack_at_edge() {
		return setField_ == _Fields.ATTACK_AT_EDGE;
	}

	public boolean isSetWeapon_used_edge() {
		return setField_ == _Fields.WEAPON_USED_EDGE;
	}

	public boolean equals(java.lang.Object other) {
		if (other instanceof DataUnit) {
			return equals((DataUnit) other);
		} else {
			return false;
		}
	}

	public boolean equals(DataUnit other) {
		return other != null && getSetField() == other.getSetField() && getFieldValue().equals(other.getFieldValue());
	}

	@Override
	public int compareTo(DataUnit other) {
		int lastComparison = org.apache.thrift.TBaseHelper.compareTo(getSetField(), other.getSetField());
		if (lastComparison == 0) {
			return org.apache.thrift.TBaseHelper.compareTo(getFieldValue(), other.getFieldValue());
		}
		return lastComparison;
	}

	@Override
	public int hashCode() {
		java.util.List<java.lang.Object> list = new java.util.ArrayList<java.lang.Object>();
		list.add(this.getClass().getName());
		org.apache.thrift.TFieldIdEnum setField = getSetField();
		if (setField != null) {
			list.add(setField.getThriftFieldId());
			java.lang.Object value = getFieldValue();
			if (value instanceof org.apache.thrift.TEnum) {
				list.add(((org.apache.thrift.TEnum) getFieldValue()).getValue());
			} else {
				list.add(value);
			}
		}
		return list.hashCode();
	}

	private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
		try {
			write(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(out)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

	private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
		try {
			read(new org.apache.thrift.protocol.TCompactProtocol(
					new org.apache.thrift.transport.TIOStreamTransport(in)));
		} catch (org.apache.thrift.TException te) {
			throw new java.io.IOException(te);
		}
	}

}
