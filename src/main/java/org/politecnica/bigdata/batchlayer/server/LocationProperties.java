/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.politecnica.bigdata.batchlayer.server;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked", "unused" })
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-10-02")
public class LocationProperties {

	public interface Iface {

		public void setCity(long id, java.lang.String city) throws org.apache.thrift.TException;

		public void setCountry(long id, java.lang.String country) throws org.apache.thrift.TException;

		public void setRegion(long id, java.lang.String region) throws org.apache.thrift.TException;

	}

	public interface AsyncIface {

		public void setCity(long id, java.lang.String city,
				org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

		public void setCountry(long id, java.lang.String country,
				org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

		public void setRegion(long id, java.lang.String region,
				org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

	}

	public static class Client extends org.apache.thrift.TServiceClient implements Iface {
		public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
			public Factory() {
			}

			public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
				return new Client(prot);
			}

			public Client getClient(org.apache.thrift.protocol.TProtocol iprot,
					org.apache.thrift.protocol.TProtocol oprot) {
				return new Client(iprot, oprot);
			}
		}

		public Client(org.apache.thrift.protocol.TProtocol prot) {
			super(prot, prot);
		}

		public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
			super(iprot, oprot);
		}

		public void setCity(long id, java.lang.String city) throws org.apache.thrift.TException {
			send_setCity(id, city);
			recv_setCity();
		}

		public void send_setCity(long id, java.lang.String city) throws org.apache.thrift.TException {
			setCity_args args = new setCity_args();
			args.setId(id);
			args.setCity(city);
			sendBase("setCity", args);
		}

		public void recv_setCity() throws org.apache.thrift.TException {
			setCity_result result = new setCity_result();
			receiveBase(result, "setCity");
			return;
		}

		public void setCountry(long id, java.lang.String country) throws org.apache.thrift.TException {
			send_setCountry(id, country);
			recv_setCountry();
		}

		public void send_setCountry(long id, java.lang.String country) throws org.apache.thrift.TException {
			setCountry_args args = new setCountry_args();
			args.setId(id);
			args.setCountry(country);
			sendBase("setCountry", args);
		}

		public void recv_setCountry() throws org.apache.thrift.TException {
			setCountry_result result = new setCountry_result();
			receiveBase(result, "setCountry");
			return;
		}

		public void setRegion(long id, java.lang.String region) throws org.apache.thrift.TException {
			send_setRegion(id, region);
			recv_setRegion();
		}

		public void send_setRegion(long id, java.lang.String region) throws org.apache.thrift.TException {
			setRegion_args args = new setRegion_args();
			args.setId(id);
			args.setRegion(region);
			sendBase("setRegion", args);
		}

		public void recv_setRegion() throws org.apache.thrift.TException {
			setRegion_result result = new setRegion_result();
			receiveBase(result, "setRegion");
			return;
		}

	}

	public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
		public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
			private org.apache.thrift.async.TAsyncClientManager clientManager;
			private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

			public Factory(org.apache.thrift.async.TAsyncClientManager clientManager,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
				this.clientManager = clientManager;
				this.protocolFactory = protocolFactory;
			}

			public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
				return new AsyncClient(protocolFactory, clientManager, transport);
			}
		}

		public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory,
				org.apache.thrift.async.TAsyncClientManager clientManager,
				org.apache.thrift.transport.TNonblockingTransport transport) {
			super(protocolFactory, clientManager, transport);
		}

		public void setCity(long id, java.lang.String city,
				org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
			checkReady();
			setCity_call method_call = new setCity_call(id, city, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class setCity_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
			private long id;
			private java.lang.String city;

			public setCity_call(long id, java.lang.String city,
					org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.id = id;
				this.city = city;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setCity",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				setCity_args args = new setCity_args();
				args.setId(id);
				args.setCity(city);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Void getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return null;
			}
		}

		public void setCountry(long id, java.lang.String country,
				org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
			checkReady();
			setCountry_call method_call = new setCountry_call(id, country, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class setCountry_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
			private long id;
			private java.lang.String country;

			public setCountry_call(long id, java.lang.String country,
					org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.id = id;
				this.country = country;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setCountry",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				setCountry_args args = new setCountry_args();
				args.setId(id);
				args.setCountry(country);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Void getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return null;
			}
		}

		public void setRegion(long id, java.lang.String region,
				org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
			checkReady();
			setRegion_call method_call = new setRegion_call(id, region, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class setRegion_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
			private long id;
			private java.lang.String region;

			public setRegion_call(long id, java.lang.String region,
					org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.id = id;
				this.region = region;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setRegion",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				setRegion_args args = new setRegion_args();
				args.setId(id);
				args.setRegion(region);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Void getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return null;
			}
		}

	}

	public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I>
			implements org.apache.thrift.TProcessor {
		private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());

		public Processor(I iface) {
			super(iface, getProcessMap(
					new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
		}

		protected Processor(I iface,
				java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
			super(iface, getProcessMap(processMap));
		}

		private static <I extends Iface> java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(
				java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
			processMap.put("setCity", new setCity());
			processMap.put("setCountry", new setCountry());
			processMap.put("setRegion", new setRegion());
			return processMap;
		}

		public static class setCity<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setCity_args> {
			public setCity() {
				super("setCity");
			}

			public setCity_args getEmptyArgsInstance() {
				return new setCity_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean handleRuntimeExceptions() {
				return false;
			}

			public setCity_result getResult(I iface, setCity_args args) throws org.apache.thrift.TException {
				setCity_result result = new setCity_result();
				iface.setCity(args.id, args.city);
				return result;
			}
		}

		public static class setCountry<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setCountry_args> {
			public setCountry() {
				super("setCountry");
			}

			public setCountry_args getEmptyArgsInstance() {
				return new setCountry_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean handleRuntimeExceptions() {
				return false;
			}

			public setCountry_result getResult(I iface, setCountry_args args) throws org.apache.thrift.TException {
				setCountry_result result = new setCountry_result();
				iface.setCountry(args.id, args.country);
				return result;
			}
		}

		public static class setRegion<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setRegion_args> {
			public setRegion() {
				super("setRegion");
			}

			public setRegion_args getEmptyArgsInstance() {
				return new setRegion_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean handleRuntimeExceptions() {
				return false;
			}

			public setRegion_result getResult(I iface, setRegion_args args) throws org.apache.thrift.TException {
				setRegion_result result = new setRegion_result();
				iface.setRegion(args.id, args.region);
				return result;
			}
		}

	}

	public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
		private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory
				.getLogger(AsyncProcessor.class.getName());

		public AsyncProcessor(I iface) {
			super(iface, getProcessMap(
					new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
		}

		protected AsyncProcessor(I iface,
				java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
			super(iface, getProcessMap(processMap));
		}

		private static <I extends AsyncIface> java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> getProcessMap(
				java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
			processMap.put("setCity", new setCity());
			processMap.put("setCountry", new setCountry());
			processMap.put("setRegion", new setRegion());
			return processMap;
		}

		public static class setCity<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, setCity_args, Void> {
			public setCity() {
				super("setCity");
			}

			public setCity_args getEmptyArgsInstance() {
				return new setCity_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
					public void onComplete(Void o) {
						setCity_result result = new setCity_result();
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						setCity_result result = new setCity_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, setCity_args args,
					org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler)
					throws org.apache.thrift.TException {
				iface.setCity(args.id, args.city, resultHandler);
			}
		}

		public static class setCountry<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, setCountry_args, Void> {
			public setCountry() {
				super("setCountry");
			}

			public setCountry_args getEmptyArgsInstance() {
				return new setCountry_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
					public void onComplete(Void o) {
						setCountry_result result = new setCountry_result();
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						setCountry_result result = new setCountry_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, setCountry_args args,
					org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler)
					throws org.apache.thrift.TException {
				iface.setCountry(args.id, args.country, resultHandler);
			}
		}

		public static class setRegion<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, setRegion_args, Void> {
			public setRegion() {
				super("setRegion");
			}

			public setRegion_args getEmptyArgsInstance() {
				return new setRegion_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
					public void onComplete(Void o) {
						setRegion_result result = new setRegion_result();
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						setRegion_result result = new setRegion_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, setRegion_args args,
					org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler)
					throws org.apache.thrift.TException {
				iface.setRegion(args.id, args.region, resultHandler);
			}
		}

	}

	public static class setCity_args implements org.apache.thrift.TBase<setCity_args, setCity_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<setCity_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"setCity_args");

		private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"id", org.apache.thrift.protocol.TType.I64, (short) 1);
		private static final org.apache.thrift.protocol.TField CITY_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"city", org.apache.thrift.protocol.TType.STRING, (short) 2);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setCity_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setCity_argsTupleSchemeFactory();

		public long id; // required
		public java.lang.String city; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			ID((short) 1, "id"), CITY((short) 2, "city");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // ID
					return ID;
				case 2: // CITY
					return CITY;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __ID_ISSET_ID = 0;
		private byte __isset_bitfield = 0;
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.ID,
					new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
			tmpMap.put(_Fields.CITY, new org.apache.thrift.meta_data.FieldMetaData("city",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setCity_args.class, metaDataMap);
		}

		public setCity_args() {
		}

		public setCity_args(long id, java.lang.String city) {
			this();
			this.id = id;
			setIdIsSet(true);
			this.city = city;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public setCity_args(setCity_args other) {
			__isset_bitfield = other.__isset_bitfield;
			this.id = other.id;
			if (other.isSetCity()) {
				this.city = other.city;
			}
		}

		public setCity_args deepCopy() {
			return new setCity_args(this);
		}

		@Override
		public void clear() {
			setIdIsSet(false);
			this.id = 0;
			this.city = null;
		}

		public long getId() {
			return this.id;
		}

		public setCity_args setId(long id) {
			this.id = id;
			setIdIsSet(true);
			return this;
		}

		public void unsetId() {
			__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
		}

		/**
		 * Returns true if field id is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetId() {
			return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
		}

		public void setIdIsSet(boolean value) {
			__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
		}

		public java.lang.String getCity() {
			return this.city;
		}

		public setCity_args setCity(java.lang.String city) {
			this.city = city;
			return this;
		}

		public void unsetCity() {
			this.city = null;
		}

		/**
		 * Returns true if field city is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetCity() {
			return this.city != null;
		}

		public void setCityIsSet(boolean value) {
			if (!value) {
				this.city = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case ID:
				if (value == null) {
					unsetId();
				} else {
					setId((java.lang.Long) value);
				}
				break;

			case CITY:
				if (value == null) {
					unsetCity();
				} else {
					setCity((java.lang.String) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case ID:
				return getId();

			case CITY:
				return getCity();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case ID:
				return isSetId();
			case CITY:
				return isSetCity();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof setCity_args)
				return this.equals((setCity_args) that);
			return false;
		}

		public boolean equals(setCity_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_id = true;
			boolean that_present_id = true;
			if (this_present_id || that_present_id) {
				if (!(this_present_id && that_present_id))
					return false;
				if (this.id != that.id)
					return false;
			}

			boolean this_present_city = true && this.isSetCity();
			boolean that_present_city = true && that.isSetCity();
			if (this_present_city || that_present_city) {
				if (!(this_present_city && that_present_city))
					return false;
				if (!this.city.equals(that.city))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(id);

			hashCode = hashCode * 8191 + ((isSetCity()) ? 131071 : 524287);
			if (isSetCity())
				hashCode = hashCode * 8191 + city.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(setCity_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetId()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetCity()).compareTo(other.isSetCity());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetCity()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.city, other.city);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("setCity_args(");
			boolean first = true;

			sb.append("id:");
			sb.append(this.id);
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("city:");
			if (this.city == null) {
				sb.append("null");
			} else {
				sb.append(this.city);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization is
				// wacky, and doesn't call the default constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class setCity_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public setCity_argsStandardScheme getScheme() {
				return new setCity_argsStandardScheme();
			}
		}

		private static class setCity_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<setCity_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, setCity_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // ID
						if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
							struct.id = iprot.readI64();
							struct.setIdIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // CITY
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.city = iprot.readString();
							struct.setCityIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, setCity_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldBegin(ID_FIELD_DESC);
				oprot.writeI64(struct.id);
				oprot.writeFieldEnd();
				if (struct.city != null) {
					oprot.writeFieldBegin(CITY_FIELD_DESC);
					oprot.writeString(struct.city);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class setCity_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public setCity_argsTupleScheme getScheme() {
				return new setCity_argsTupleScheme();
			}
		}

		private static class setCity_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<setCity_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, setCity_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetId()) {
					optionals.set(0);
				}
				if (struct.isSetCity()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetId()) {
					oprot.writeI64(struct.id);
				}
				if (struct.isSetCity()) {
					oprot.writeString(struct.city);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, setCity_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.id = iprot.readI64();
					struct.setIdIsSet(true);
				}
				if (incoming.get(1)) {
					struct.city = iprot.readString();
					struct.setCityIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class setCity_result implements org.apache.thrift.TBase<setCity_result, setCity_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<setCity_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"setCity_result");

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setCity_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setCity_resultTupleSchemeFactory();

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			;

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setCity_result.class, metaDataMap);
		}

		public setCity_result() {
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public setCity_result(setCity_result other) {
		}

		public setCity_result deepCopy() {
			return new setCity_result(this);
		}

		@Override
		public void clear() {
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof setCity_result)
				return this.equals((setCity_result) that);
			return false;
		}

		public boolean equals(setCity_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			return hashCode;
		}

		@Override
		public int compareTo(setCity_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("setCity_result(");
			boolean first = true;

			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class setCity_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public setCity_resultStandardScheme getScheme() {
				return new setCity_resultStandardScheme();
			}
		}

		private static class setCity_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<setCity_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, setCity_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, setCity_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class setCity_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public setCity_resultTupleScheme getScheme() {
				return new setCity_resultTupleScheme();
			}
		}

		private static class setCity_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<setCity_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, setCity_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, setCity_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class setCountry_args implements org.apache.thrift.TBase<setCountry_args, setCountry_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<setCountry_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"setCountry_args");

		private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"id", org.apache.thrift.protocol.TType.I64, (short) 1);
		private static final org.apache.thrift.protocol.TField COUNTRY_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"country", org.apache.thrift.protocol.TType.STRING, (short) 2);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setCountry_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setCountry_argsTupleSchemeFactory();

		public long id; // required
		public java.lang.String country; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			ID((short) 1, "id"), COUNTRY((short) 2, "country");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // ID
					return ID;
				case 2: // COUNTRY
					return COUNTRY;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __ID_ISSET_ID = 0;
		private byte __isset_bitfield = 0;
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.ID,
					new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
			tmpMap.put(_Fields.COUNTRY, new org.apache.thrift.meta_data.FieldMetaData("country",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setCountry_args.class, metaDataMap);
		}

		public setCountry_args() {
		}

		public setCountry_args(long id, java.lang.String country) {
			this();
			this.id = id;
			setIdIsSet(true);
			this.country = country;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public setCountry_args(setCountry_args other) {
			__isset_bitfield = other.__isset_bitfield;
			this.id = other.id;
			if (other.isSetCountry()) {
				this.country = other.country;
			}
		}

		public setCountry_args deepCopy() {
			return new setCountry_args(this);
		}

		@Override
		public void clear() {
			setIdIsSet(false);
			this.id = 0;
			this.country = null;
		}

		public long getId() {
			return this.id;
		}

		public setCountry_args setId(long id) {
			this.id = id;
			setIdIsSet(true);
			return this;
		}

		public void unsetId() {
			__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
		}

		/**
		 * Returns true if field id is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetId() {
			return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
		}

		public void setIdIsSet(boolean value) {
			__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
		}

		public java.lang.String getCountry() {
			return this.country;
		}

		public setCountry_args setCountry(java.lang.String country) {
			this.country = country;
			return this;
		}

		public void unsetCountry() {
			this.country = null;
		}

		/**
		 * Returns true if field country is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetCountry() {
			return this.country != null;
		}

		public void setCountryIsSet(boolean value) {
			if (!value) {
				this.country = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case ID:
				if (value == null) {
					unsetId();
				} else {
					setId((java.lang.Long) value);
				}
				break;

			case COUNTRY:
				if (value == null) {
					unsetCountry();
				} else {
					setCountry((java.lang.String) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case ID:
				return getId();

			case COUNTRY:
				return getCountry();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case ID:
				return isSetId();
			case COUNTRY:
				return isSetCountry();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof setCountry_args)
				return this.equals((setCountry_args) that);
			return false;
		}

		public boolean equals(setCountry_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_id = true;
			boolean that_present_id = true;
			if (this_present_id || that_present_id) {
				if (!(this_present_id && that_present_id))
					return false;
				if (this.id != that.id)
					return false;
			}

			boolean this_present_country = true && this.isSetCountry();
			boolean that_present_country = true && that.isSetCountry();
			if (this_present_country || that_present_country) {
				if (!(this_present_country && that_present_country))
					return false;
				if (!this.country.equals(that.country))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(id);

			hashCode = hashCode * 8191 + ((isSetCountry()) ? 131071 : 524287);
			if (isSetCountry())
				hashCode = hashCode * 8191 + country.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(setCountry_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetId()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetCountry()).compareTo(other.isSetCountry());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetCountry()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.country, other.country);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("setCountry_args(");
			boolean first = true;

			sb.append("id:");
			sb.append(this.id);
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("country:");
			if (this.country == null) {
				sb.append("null");
			} else {
				sb.append(this.country);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization is
				// wacky, and doesn't call the default constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class setCountry_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public setCountry_argsStandardScheme getScheme() {
				return new setCountry_argsStandardScheme();
			}
		}

		private static class setCountry_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<setCountry_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, setCountry_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // ID
						if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
							struct.id = iprot.readI64();
							struct.setIdIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // COUNTRY
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.country = iprot.readString();
							struct.setCountryIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, setCountry_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldBegin(ID_FIELD_DESC);
				oprot.writeI64(struct.id);
				oprot.writeFieldEnd();
				if (struct.country != null) {
					oprot.writeFieldBegin(COUNTRY_FIELD_DESC);
					oprot.writeString(struct.country);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class setCountry_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public setCountry_argsTupleScheme getScheme() {
				return new setCountry_argsTupleScheme();
			}
		}

		private static class setCountry_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<setCountry_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, setCountry_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetId()) {
					optionals.set(0);
				}
				if (struct.isSetCountry()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetId()) {
					oprot.writeI64(struct.id);
				}
				if (struct.isSetCountry()) {
					oprot.writeString(struct.country);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, setCountry_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.id = iprot.readI64();
					struct.setIdIsSet(true);
				}
				if (incoming.get(1)) {
					struct.country = iprot.readString();
					struct.setCountryIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class setCountry_result
			implements org.apache.thrift.TBase<setCountry_result, setCountry_result._Fields>, java.io.Serializable,
			Cloneable, Comparable<setCountry_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"setCountry_result");

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setCountry_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setCountry_resultTupleSchemeFactory();

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			;

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setCountry_result.class, metaDataMap);
		}

		public setCountry_result() {
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public setCountry_result(setCountry_result other) {
		}

		public setCountry_result deepCopy() {
			return new setCountry_result(this);
		}

		@Override
		public void clear() {
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof setCountry_result)
				return this.equals((setCountry_result) that);
			return false;
		}

		public boolean equals(setCountry_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			return hashCode;
		}

		@Override
		public int compareTo(setCountry_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("setCountry_result(");
			boolean first = true;

			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class setCountry_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public setCountry_resultStandardScheme getScheme() {
				return new setCountry_resultStandardScheme();
			}
		}

		private static class setCountry_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<setCountry_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, setCountry_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, setCountry_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class setCountry_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public setCountry_resultTupleScheme getScheme() {
				return new setCountry_resultTupleScheme();
			}
		}

		private static class setCountry_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<setCountry_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, setCountry_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, setCountry_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class setRegion_args implements org.apache.thrift.TBase<setRegion_args, setRegion_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<setRegion_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"setRegion_args");

		private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"id", org.apache.thrift.protocol.TType.I64, (short) 1);
		private static final org.apache.thrift.protocol.TField REGION_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"region", org.apache.thrift.protocol.TType.STRING, (short) 2);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setRegion_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setRegion_argsTupleSchemeFactory();

		public long id; // required
		public java.lang.String region; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			ID((short) 1, "id"), REGION((short) 2, "region");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // ID
					return ID;
				case 2: // REGION
					return REGION;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __ID_ISSET_ID = 0;
		private byte __isset_bitfield = 0;
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.ID,
					new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
			tmpMap.put(_Fields.REGION, new org.apache.thrift.meta_data.FieldMetaData("region",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setRegion_args.class, metaDataMap);
		}

		public setRegion_args() {
		}

		public setRegion_args(long id, java.lang.String region) {
			this();
			this.id = id;
			setIdIsSet(true);
			this.region = region;
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public setRegion_args(setRegion_args other) {
			__isset_bitfield = other.__isset_bitfield;
			this.id = other.id;
			if (other.isSetRegion()) {
				this.region = other.region;
			}
		}

		public setRegion_args deepCopy() {
			return new setRegion_args(this);
		}

		@Override
		public void clear() {
			setIdIsSet(false);
			this.id = 0;
			this.region = null;
		}

		public long getId() {
			return this.id;
		}

		public setRegion_args setId(long id) {
			this.id = id;
			setIdIsSet(true);
			return this;
		}

		public void unsetId() {
			__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
		}

		/**
		 * Returns true if field id is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetId() {
			return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
		}

		public void setIdIsSet(boolean value) {
			__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
		}

		public java.lang.String getRegion() {
			return this.region;
		}

		public setRegion_args setRegion(java.lang.String region) {
			this.region = region;
			return this;
		}

		public void unsetRegion() {
			this.region = null;
		}

		/**
		 * Returns true if field region is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetRegion() {
			return this.region != null;
		}

		public void setRegionIsSet(boolean value) {
			if (!value) {
				this.region = null;
			}
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case ID:
				if (value == null) {
					unsetId();
				} else {
					setId((java.lang.Long) value);
				}
				break;

			case REGION:
				if (value == null) {
					unsetRegion();
				} else {
					setRegion((java.lang.String) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case ID:
				return getId();

			case REGION:
				return getRegion();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case ID:
				return isSetId();
			case REGION:
				return isSetRegion();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof setRegion_args)
				return this.equals((setRegion_args) that);
			return false;
		}

		public boolean equals(setRegion_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_id = true;
			boolean that_present_id = true;
			if (this_present_id || that_present_id) {
				if (!(this_present_id && that_present_id))
					return false;
				if (this.id != that.id)
					return false;
			}

			boolean this_present_region = true && this.isSetRegion();
			boolean that_present_region = true && that.isSetRegion();
			if (this_present_region || that_present_region) {
				if (!(this_present_region && that_present_region))
					return false;
				if (!this.region.equals(that.region))
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(id);

			hashCode = hashCode * 8191 + ((isSetRegion()) ? 131071 : 524287);
			if (isSetRegion())
				hashCode = hashCode * 8191 + region.hashCode();

			return hashCode;
		}

		@Override
		public int compareTo(setRegion_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetId()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetRegion()).compareTo(other.isSetRegion());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetRegion()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.region, other.region);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("setRegion_args(");
			boolean first = true;

			sb.append("id:");
			sb.append(this.id);
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("region:");
			if (this.region == null) {
				sb.append("null");
			} else {
				sb.append(this.region);
			}
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization is
				// wacky, and doesn't call the default constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class setRegion_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public setRegion_argsStandardScheme getScheme() {
				return new setRegion_argsStandardScheme();
			}
		}

		private static class setRegion_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<setRegion_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, setRegion_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // ID
						if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
							struct.id = iprot.readI64();
							struct.setIdIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // REGION
						if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
							struct.region = iprot.readString();
							struct.setRegionIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, setRegion_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldBegin(ID_FIELD_DESC);
				oprot.writeI64(struct.id);
				oprot.writeFieldEnd();
				if (struct.region != null) {
					oprot.writeFieldBegin(REGION_FIELD_DESC);
					oprot.writeString(struct.region);
					oprot.writeFieldEnd();
				}
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class setRegion_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public setRegion_argsTupleScheme getScheme() {
				return new setRegion_argsTupleScheme();
			}
		}

		private static class setRegion_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<setRegion_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, setRegion_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetId()) {
					optionals.set(0);
				}
				if (struct.isSetRegion()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetId()) {
					oprot.writeI64(struct.id);
				}
				if (struct.isSetRegion()) {
					oprot.writeString(struct.region);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, setRegion_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.id = iprot.readI64();
					struct.setIdIsSet(true);
				}
				if (incoming.get(1)) {
					struct.region = iprot.readString();
					struct.setRegionIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class setRegion_result implements org.apache.thrift.TBase<setRegion_result, setRegion_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<setRegion_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"setRegion_result");

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setRegion_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setRegion_resultTupleSchemeFactory();

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			;

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setRegion_result.class, metaDataMap);
		}

		public setRegion_result() {
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public setRegion_result(setRegion_result other) {
		}

		public setRegion_result deepCopy() {
			return new setRegion_result(this);
		}

		@Override
		public void clear() {
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof setRegion_result)
				return this.equals((setRegion_result) that);
			return false;
		}

		public boolean equals(setRegion_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			return hashCode;
		}

		@Override
		public int compareTo(setRegion_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("setRegion_result(");
			boolean first = true;

			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class setRegion_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public setRegion_resultStandardScheme getScheme() {
				return new setRegion_resultStandardScheme();
			}
		}

		private static class setRegion_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<setRegion_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, setRegion_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, setRegion_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class setRegion_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public setRegion_resultTupleScheme getScheme() {
				return new setRegion_resultTupleScheme();
			}
		}

		private static class setRegion_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<setRegion_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, setRegion_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, setRegion_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

}
