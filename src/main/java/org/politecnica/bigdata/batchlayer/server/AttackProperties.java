/**
 * Autogenerated by Thrift Compiler (0.11.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package org.politecnica.bigdata.batchlayer.server;

@SuppressWarnings({ "cast", "rawtypes", "serial", "unchecked", "unused" })
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.11.0)", date = "2018-10-02")
public class AttackProperties {

	public interface Iface {

		public void setNumberOfKills(long id, long nkills) throws org.apache.thrift.TException;

		public void setDate(long id, long day, long month, long year) throws org.apache.thrift.TException;

		public void setCoordinates(long id, double latitude, double longitude) throws org.apache.thrift.TException;

	}

	public interface AsyncIface {

		public void setNumberOfKills(long id, long nkills,
				org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

		public void setDate(long id, long day, long month, long year,
				org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

		public void setCoordinates(long id, double latitude, double longitude,
				org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException;

	}

	public static class Client extends org.apache.thrift.TServiceClient implements Iface {
		public static class Factory implements org.apache.thrift.TServiceClientFactory<Client> {
			public Factory() {
			}

			public Client getClient(org.apache.thrift.protocol.TProtocol prot) {
				return new Client(prot);
			}

			public Client getClient(org.apache.thrift.protocol.TProtocol iprot,
					org.apache.thrift.protocol.TProtocol oprot) {
				return new Client(iprot, oprot);
			}
		}

		public Client(org.apache.thrift.protocol.TProtocol prot) {
			super(prot, prot);
		}

		public Client(org.apache.thrift.protocol.TProtocol iprot, org.apache.thrift.protocol.TProtocol oprot) {
			super(iprot, oprot);
		}

		public void setNumberOfKills(long id, long nkills) throws org.apache.thrift.TException {
			send_setNumberOfKills(id, nkills);
			recv_setNumberOfKills();
		}

		public void send_setNumberOfKills(long id, long nkills) throws org.apache.thrift.TException {
			setNumberOfKills_args args = new setNumberOfKills_args();
			args.setId(id);
			args.setNkills(nkills);
			sendBase("setNumberOfKills", args);
		}

		public void recv_setNumberOfKills() throws org.apache.thrift.TException {
			setNumberOfKills_result result = new setNumberOfKills_result();
			receiveBase(result, "setNumberOfKills");
			return;
		}

		public void setDate(long id, long day, long month, long year) throws org.apache.thrift.TException {
			send_setDate(id, day, month, year);
			recv_setDate();
		}

		public void send_setDate(long id, long day, long month, long year) throws org.apache.thrift.TException {
			setDate_args args = new setDate_args();
			args.setId(id);
			args.setDay(day);
			args.setMonth(month);
			args.setYear(year);
			sendBase("setDate", args);
		}

		public void recv_setDate() throws org.apache.thrift.TException {
			setDate_result result = new setDate_result();
			receiveBase(result, "setDate");
			return;
		}

		public void setCoordinates(long id, double latitude, double longitude) throws org.apache.thrift.TException {
			send_setCoordinates(id, latitude, longitude);
			recv_setCoordinates();
		}

		public void send_setCoordinates(long id, double latitude, double longitude)
				throws org.apache.thrift.TException {
			setCoordinates_args args = new setCoordinates_args();
			args.setId(id);
			args.setLatitude(latitude);
			args.setLongitude(longitude);
			sendBase("setCoordinates", args);
		}

		public void recv_setCoordinates() throws org.apache.thrift.TException {
			setCoordinates_result result = new setCoordinates_result();
			receiveBase(result, "setCoordinates");
			return;
		}

	}

	public static class AsyncClient extends org.apache.thrift.async.TAsyncClient implements AsyncIface {
		public static class Factory implements org.apache.thrift.async.TAsyncClientFactory<AsyncClient> {
			private org.apache.thrift.async.TAsyncClientManager clientManager;
			private org.apache.thrift.protocol.TProtocolFactory protocolFactory;

			public Factory(org.apache.thrift.async.TAsyncClientManager clientManager,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory) {
				this.clientManager = clientManager;
				this.protocolFactory = protocolFactory;
			}

			public AsyncClient getAsyncClient(org.apache.thrift.transport.TNonblockingTransport transport) {
				return new AsyncClient(protocolFactory, clientManager, transport);
			}
		}

		public AsyncClient(org.apache.thrift.protocol.TProtocolFactory protocolFactory,
				org.apache.thrift.async.TAsyncClientManager clientManager,
				org.apache.thrift.transport.TNonblockingTransport transport) {
			super(protocolFactory, clientManager, transport);
		}

		public void setNumberOfKills(long id, long nkills,
				org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
			checkReady();
			setNumberOfKills_call method_call = new setNumberOfKills_call(id, nkills, resultHandler, this,
					___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class setNumberOfKills_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
			private long id;
			private long nkills;

			public setNumberOfKills_call(long id, long nkills,
					org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.id = id;
				this.nkills = nkills;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setNumberOfKills",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				setNumberOfKills_args args = new setNumberOfKills_args();
				args.setId(id);
				args.setNkills(nkills);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Void getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return null;
			}
		}

		public void setDate(long id, long day, long month, long year,
				org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
			checkReady();
			setDate_call method_call = new setDate_call(id, day, month, year, resultHandler, this, ___protocolFactory,
					___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class setDate_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
			private long id;
			private long day;
			private long month;
			private long year;

			public setDate_call(long id, long day, long month, long year,
					org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.id = id;
				this.day = day;
				this.month = month;
				this.year = year;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setDate",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				setDate_args args = new setDate_args();
				args.setId(id);
				args.setDay(day);
				args.setMonth(month);
				args.setYear(year);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Void getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return null;
			}
		}

		public void setCoordinates(long id, double latitude, double longitude,
				org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler) throws org.apache.thrift.TException {
			checkReady();
			setCoordinates_call method_call = new setCoordinates_call(id, latitude, longitude, resultHandler, this,
					___protocolFactory, ___transport);
			this.___currentMethod = method_call;
			___manager.call(method_call);
		}

		public static class setCoordinates_call extends org.apache.thrift.async.TAsyncMethodCall<Void> {
			private long id;
			private double latitude;
			private double longitude;

			public setCoordinates_call(long id, double latitude, double longitude,
					org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler,
					org.apache.thrift.async.TAsyncClient client,
					org.apache.thrift.protocol.TProtocolFactory protocolFactory,
					org.apache.thrift.transport.TNonblockingTransport transport) throws org.apache.thrift.TException {
				super(client, protocolFactory, transport, resultHandler, false);
				this.id = id;
				this.latitude = latitude;
				this.longitude = longitude;
			}

			public void write_args(org.apache.thrift.protocol.TProtocol prot) throws org.apache.thrift.TException {
				prot.writeMessageBegin(new org.apache.thrift.protocol.TMessage("setCoordinates",
						org.apache.thrift.protocol.TMessageType.CALL, 0));
				setCoordinates_args args = new setCoordinates_args();
				args.setId(id);
				args.setLatitude(latitude);
				args.setLongitude(longitude);
				args.write(prot);
				prot.writeMessageEnd();
			}

			public Void getResult() throws org.apache.thrift.TException {
				if (getState() != org.apache.thrift.async.TAsyncMethodCall.State.RESPONSE_READ) {
					throw new java.lang.IllegalStateException("Method call not finished!");
				}
				org.apache.thrift.transport.TMemoryInputTransport memoryTransport = new org.apache.thrift.transport.TMemoryInputTransport(
						getFrameBuffer().array());
				org.apache.thrift.protocol.TProtocol prot = client.getProtocolFactory().getProtocol(memoryTransport);
				return null;
			}
		}

	}

	public static class Processor<I extends Iface> extends org.apache.thrift.TBaseProcessor<I>
			implements org.apache.thrift.TProcessor {
		private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory.getLogger(Processor.class.getName());

		public Processor(I iface) {
			super(iface, getProcessMap(
					new java.util.HashMap<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>>()));
		}

		protected Processor(I iface,
				java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
			super(iface, getProcessMap(processMap));
		}

		private static <I extends Iface> java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> getProcessMap(
				java.util.Map<java.lang.String, org.apache.thrift.ProcessFunction<I, ? extends org.apache.thrift.TBase>> processMap) {
			processMap.put("setNumberOfKills", new setNumberOfKills());
			processMap.put("setDate", new setDate());
			processMap.put("setCoordinates", new setCoordinates());
			return processMap;
		}

		public static class setNumberOfKills<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, setNumberOfKills_args> {
			public setNumberOfKills() {
				super("setNumberOfKills");
			}

			public setNumberOfKills_args getEmptyArgsInstance() {
				return new setNumberOfKills_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean handleRuntimeExceptions() {
				return false;
			}

			public setNumberOfKills_result getResult(I iface, setNumberOfKills_args args)
					throws org.apache.thrift.TException {
				setNumberOfKills_result result = new setNumberOfKills_result();
				iface.setNumberOfKills(args.id, args.nkills);
				return result;
			}
		}

		public static class setDate<I extends Iface> extends org.apache.thrift.ProcessFunction<I, setDate_args> {
			public setDate() {
				super("setDate");
			}

			public setDate_args getEmptyArgsInstance() {
				return new setDate_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean handleRuntimeExceptions() {
				return false;
			}

			public setDate_result getResult(I iface, setDate_args args) throws org.apache.thrift.TException {
				setDate_result result = new setDate_result();
				iface.setDate(args.id, args.day, args.month, args.year);
				return result;
			}
		}

		public static class setCoordinates<I extends Iface>
				extends org.apache.thrift.ProcessFunction<I, setCoordinates_args> {
			public setCoordinates() {
				super("setCoordinates");
			}

			public setCoordinates_args getEmptyArgsInstance() {
				return new setCoordinates_args();
			}

			protected boolean isOneway() {
				return false;
			}

			@Override
			protected boolean handleRuntimeExceptions() {
				return false;
			}

			public setCoordinates_result getResult(I iface, setCoordinates_args args)
					throws org.apache.thrift.TException {
				setCoordinates_result result = new setCoordinates_result();
				iface.setCoordinates(args.id, args.latitude, args.longitude);
				return result;
			}
		}

	}

	public static class AsyncProcessor<I extends AsyncIface> extends org.apache.thrift.TBaseAsyncProcessor<I> {
		private static final org.slf4j.Logger _LOGGER = org.slf4j.LoggerFactory
				.getLogger(AsyncProcessor.class.getName());

		public AsyncProcessor(I iface) {
			super(iface, getProcessMap(
					new java.util.HashMap<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>>()));
		}

		protected AsyncProcessor(I iface,
				java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
			super(iface, getProcessMap(processMap));
		}

		private static <I extends AsyncIface> java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> getProcessMap(
				java.util.Map<java.lang.String, org.apache.thrift.AsyncProcessFunction<I, ? extends org.apache.thrift.TBase, ?>> processMap) {
			processMap.put("setNumberOfKills", new setNumberOfKills());
			processMap.put("setDate", new setDate());
			processMap.put("setCoordinates", new setCoordinates());
			return processMap;
		}

		public static class setNumberOfKills<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, setNumberOfKills_args, Void> {
			public setNumberOfKills() {
				super("setNumberOfKills");
			}

			public setNumberOfKills_args getEmptyArgsInstance() {
				return new setNumberOfKills_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
					public void onComplete(Void o) {
						setNumberOfKills_result result = new setNumberOfKills_result();
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						setNumberOfKills_result result = new setNumberOfKills_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, setNumberOfKills_args args,
					org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler)
					throws org.apache.thrift.TException {
				iface.setNumberOfKills(args.id, args.nkills, resultHandler);
			}
		}

		public static class setDate<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, setDate_args, Void> {
			public setDate() {
				super("setDate");
			}

			public setDate_args getEmptyArgsInstance() {
				return new setDate_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
					public void onComplete(Void o) {
						setDate_result result = new setDate_result();
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						setDate_result result = new setDate_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, setDate_args args,
					org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler)
					throws org.apache.thrift.TException {
				iface.setDate(args.id, args.day, args.month, args.year, resultHandler);
			}
		}

		public static class setCoordinates<I extends AsyncIface>
				extends org.apache.thrift.AsyncProcessFunction<I, setCoordinates_args, Void> {
			public setCoordinates() {
				super("setCoordinates");
			}

			public setCoordinates_args getEmptyArgsInstance() {
				return new setCoordinates_args();
			}

			public org.apache.thrift.async.AsyncMethodCallback<Void> getResultHandler(
					final org.apache.thrift.server.AbstractNonblockingServer.AsyncFrameBuffer fb, final int seqid) {
				final org.apache.thrift.AsyncProcessFunction fcall = this;
				return new org.apache.thrift.async.AsyncMethodCallback<Void>() {
					public void onComplete(Void o) {
						setCoordinates_result result = new setCoordinates_result();
						try {
							fcall.sendResponse(fb, result, org.apache.thrift.protocol.TMessageType.REPLY, seqid);
						} catch (org.apache.thrift.transport.TTransportException e) {
							_LOGGER.error("TTransportException writing to internal frame buffer", e);
							fb.close();
						} catch (java.lang.Exception e) {
							_LOGGER.error("Exception writing to internal frame buffer", e);
							onError(e);
						}
					}

					public void onError(java.lang.Exception e) {
						byte msgType = org.apache.thrift.protocol.TMessageType.REPLY;
						org.apache.thrift.TSerializable msg;
						setCoordinates_result result = new setCoordinates_result();
						if (e instanceof org.apache.thrift.transport.TTransportException) {
							_LOGGER.error("TTransportException inside handler", e);
							fb.close();
							return;
						} else if (e instanceof org.apache.thrift.TApplicationException) {
							_LOGGER.error("TApplicationException inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = (org.apache.thrift.TApplicationException) e;
						} else {
							_LOGGER.error("Exception inside handler", e);
							msgType = org.apache.thrift.protocol.TMessageType.EXCEPTION;
							msg = new org.apache.thrift.TApplicationException(
									org.apache.thrift.TApplicationException.INTERNAL_ERROR, e.getMessage());
						}
						try {
							fcall.sendResponse(fb, msg, msgType, seqid);
						} catch (java.lang.Exception ex) {
							_LOGGER.error("Exception writing to internal frame buffer", ex);
							fb.close();
						}
					}
				};
			}

			protected boolean isOneway() {
				return false;
			}

			public void start(I iface, setCoordinates_args args,
					org.apache.thrift.async.AsyncMethodCallback<Void> resultHandler)
					throws org.apache.thrift.TException {
				iface.setCoordinates(args.id, args.latitude, args.longitude, resultHandler);
			}
		}

	}

	public static class setNumberOfKills_args
			implements org.apache.thrift.TBase<setNumberOfKills_args, setNumberOfKills_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<setNumberOfKills_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"setNumberOfKills_args");

		private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"id", org.apache.thrift.protocol.TType.I64, (short) 1);
		private static final org.apache.thrift.protocol.TField NKILLS_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"nkills", org.apache.thrift.protocol.TType.I64, (short) 2);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setNumberOfKills_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setNumberOfKills_argsTupleSchemeFactory();

		public long id; // required
		public long nkills; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			ID((short) 1, "id"), NKILLS((short) 2, "nkills");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // ID
					return ID;
				case 2: // NKILLS
					return NKILLS;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __ID_ISSET_ID = 0;
		private static final int __NKILLS_ISSET_ID = 1;
		private byte __isset_bitfield = 0;
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.ID,
					new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
			tmpMap.put(_Fields.NKILLS,
					new org.apache.thrift.meta_data.FieldMetaData("nkills",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setNumberOfKills_args.class, metaDataMap);
		}

		public setNumberOfKills_args() {
		}

		public setNumberOfKills_args(long id, long nkills) {
			this();
			this.id = id;
			setIdIsSet(true);
			this.nkills = nkills;
			setNkillsIsSet(true);
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public setNumberOfKills_args(setNumberOfKills_args other) {
			__isset_bitfield = other.__isset_bitfield;
			this.id = other.id;
			this.nkills = other.nkills;
		}

		public setNumberOfKills_args deepCopy() {
			return new setNumberOfKills_args(this);
		}

		@Override
		public void clear() {
			setIdIsSet(false);
			this.id = 0;
			setNkillsIsSet(false);
			this.nkills = 0;
		}

		public long getId() {
			return this.id;
		}

		public setNumberOfKills_args setId(long id) {
			this.id = id;
			setIdIsSet(true);
			return this;
		}

		public void unsetId() {
			__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
		}

		/**
		 * Returns true if field id is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetId() {
			return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
		}

		public void setIdIsSet(boolean value) {
			__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
		}

		public long getNkills() {
			return this.nkills;
		}

		public setNumberOfKills_args setNkills(long nkills) {
			this.nkills = nkills;
			setNkillsIsSet(true);
			return this;
		}

		public void unsetNkills() {
			__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __NKILLS_ISSET_ID);
		}

		/**
		 * Returns true if field nkills is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetNkills() {
			return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __NKILLS_ISSET_ID);
		}

		public void setNkillsIsSet(boolean value) {
			__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __NKILLS_ISSET_ID, value);
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case ID:
				if (value == null) {
					unsetId();
				} else {
					setId((java.lang.Long) value);
				}
				break;

			case NKILLS:
				if (value == null) {
					unsetNkills();
				} else {
					setNkills((java.lang.Long) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case ID:
				return getId();

			case NKILLS:
				return getNkills();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case ID:
				return isSetId();
			case NKILLS:
				return isSetNkills();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof setNumberOfKills_args)
				return this.equals((setNumberOfKills_args) that);
			return false;
		}

		public boolean equals(setNumberOfKills_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_id = true;
			boolean that_present_id = true;
			if (this_present_id || that_present_id) {
				if (!(this_present_id && that_present_id))
					return false;
				if (this.id != that.id)
					return false;
			}

			boolean this_present_nkills = true;
			boolean that_present_nkills = true;
			if (this_present_nkills || that_present_nkills) {
				if (!(this_present_nkills && that_present_nkills))
					return false;
				if (this.nkills != that.nkills)
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(id);

			hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(nkills);

			return hashCode;
		}

		@Override
		public int compareTo(setNumberOfKills_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetId()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetNkills()).compareTo(other.isSetNkills());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetNkills()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.nkills, other.nkills);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("setNumberOfKills_args(");
			boolean first = true;

			sb.append("id:");
			sb.append(this.id);
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("nkills:");
			sb.append(this.nkills);
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization is
				// wacky, and doesn't call the default constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class setNumberOfKills_argsStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public setNumberOfKills_argsStandardScheme getScheme() {
				return new setNumberOfKills_argsStandardScheme();
			}
		}

		private static class setNumberOfKills_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<setNumberOfKills_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, setNumberOfKills_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // ID
						if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
							struct.id = iprot.readI64();
							struct.setIdIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // NKILLS
						if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
							struct.nkills = iprot.readI64();
							struct.setNkillsIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, setNumberOfKills_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldBegin(ID_FIELD_DESC);
				oprot.writeI64(struct.id);
				oprot.writeFieldEnd();
				oprot.writeFieldBegin(NKILLS_FIELD_DESC);
				oprot.writeI64(struct.nkills);
				oprot.writeFieldEnd();
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class setNumberOfKills_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public setNumberOfKills_argsTupleScheme getScheme() {
				return new setNumberOfKills_argsTupleScheme();
			}
		}

		private static class setNumberOfKills_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<setNumberOfKills_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, setNumberOfKills_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetId()) {
					optionals.set(0);
				}
				if (struct.isSetNkills()) {
					optionals.set(1);
				}
				oprot.writeBitSet(optionals, 2);
				if (struct.isSetId()) {
					oprot.writeI64(struct.id);
				}
				if (struct.isSetNkills()) {
					oprot.writeI64(struct.nkills);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, setNumberOfKills_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(2);
				if (incoming.get(0)) {
					struct.id = iprot.readI64();
					struct.setIdIsSet(true);
				}
				if (incoming.get(1)) {
					struct.nkills = iprot.readI64();
					struct.setNkillsIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class setNumberOfKills_result
			implements org.apache.thrift.TBase<setNumberOfKills_result, setNumberOfKills_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<setNumberOfKills_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"setNumberOfKills_result");

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setNumberOfKills_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setNumberOfKills_resultTupleSchemeFactory();

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			;

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setNumberOfKills_result.class, metaDataMap);
		}

		public setNumberOfKills_result() {
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public setNumberOfKills_result(setNumberOfKills_result other) {
		}

		public setNumberOfKills_result deepCopy() {
			return new setNumberOfKills_result(this);
		}

		@Override
		public void clear() {
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof setNumberOfKills_result)
				return this.equals((setNumberOfKills_result) that);
			return false;
		}

		public boolean equals(setNumberOfKills_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			return hashCode;
		}

		@Override
		public int compareTo(setNumberOfKills_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("setNumberOfKills_result(");
			boolean first = true;

			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class setNumberOfKills_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public setNumberOfKills_resultStandardScheme getScheme() {
				return new setNumberOfKills_resultStandardScheme();
			}
		}

		private static class setNumberOfKills_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<setNumberOfKills_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, setNumberOfKills_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, setNumberOfKills_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class setNumberOfKills_resultTupleSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public setNumberOfKills_resultTupleScheme getScheme() {
				return new setNumberOfKills_resultTupleScheme();
			}
		}

		private static class setNumberOfKills_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<setNumberOfKills_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, setNumberOfKills_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, setNumberOfKills_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class setDate_args implements org.apache.thrift.TBase<setDate_args, setDate_args._Fields>,
			java.io.Serializable, Cloneable, Comparable<setDate_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"setDate_args");

		private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"id", org.apache.thrift.protocol.TType.I64, (short) 1);
		private static final org.apache.thrift.protocol.TField DAY_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"day", org.apache.thrift.protocol.TType.I64, (short) 2);
		private static final org.apache.thrift.protocol.TField MONTH_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"month", org.apache.thrift.protocol.TType.I64, (short) 3);
		private static final org.apache.thrift.protocol.TField YEAR_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"year", org.apache.thrift.protocol.TType.I64, (short) 4);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setDate_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setDate_argsTupleSchemeFactory();

		public long id; // required
		public long day; // required
		public long month; // required
		public long year; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			ID((short) 1, "id"), DAY((short) 2, "day"), MONTH((short) 3, "month"), YEAR((short) 4, "year");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // ID
					return ID;
				case 2: // DAY
					return DAY;
				case 3: // MONTH
					return MONTH;
				case 4: // YEAR
					return YEAR;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __ID_ISSET_ID = 0;
		private static final int __DAY_ISSET_ID = 1;
		private static final int __MONTH_ISSET_ID = 2;
		private static final int __YEAR_ISSET_ID = 3;
		private byte __isset_bitfield = 0;
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.ID,
					new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
			tmpMap.put(_Fields.DAY,
					new org.apache.thrift.meta_data.FieldMetaData("day",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
			tmpMap.put(_Fields.MONTH,
					new org.apache.thrift.meta_data.FieldMetaData("month",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
			tmpMap.put(_Fields.YEAR,
					new org.apache.thrift.meta_data.FieldMetaData("year",
							org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setDate_args.class, metaDataMap);
		}

		public setDate_args() {
		}

		public setDate_args(long id, long day, long month, long year) {
			this();
			this.id = id;
			setIdIsSet(true);
			this.day = day;
			setDayIsSet(true);
			this.month = month;
			setMonthIsSet(true);
			this.year = year;
			setYearIsSet(true);
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public setDate_args(setDate_args other) {
			__isset_bitfield = other.__isset_bitfield;
			this.id = other.id;
			this.day = other.day;
			this.month = other.month;
			this.year = other.year;
		}

		public setDate_args deepCopy() {
			return new setDate_args(this);
		}

		@Override
		public void clear() {
			setIdIsSet(false);
			this.id = 0;
			setDayIsSet(false);
			this.day = 0;
			setMonthIsSet(false);
			this.month = 0;
			setYearIsSet(false);
			this.year = 0;
		}

		public long getId() {
			return this.id;
		}

		public setDate_args setId(long id) {
			this.id = id;
			setIdIsSet(true);
			return this;
		}

		public void unsetId() {
			__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
		}

		/**
		 * Returns true if field id is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetId() {
			return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
		}

		public void setIdIsSet(boolean value) {
			__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
		}

		public long getDay() {
			return this.day;
		}

		public setDate_args setDay(long day) {
			this.day = day;
			setDayIsSet(true);
			return this;
		}

		public void unsetDay() {
			__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __DAY_ISSET_ID);
		}

		/**
		 * Returns true if field day is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetDay() {
			return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __DAY_ISSET_ID);
		}

		public void setDayIsSet(boolean value) {
			__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __DAY_ISSET_ID, value);
		}

		public long getMonth() {
			return this.month;
		}

		public setDate_args setMonth(long month) {
			this.month = month;
			setMonthIsSet(true);
			return this;
		}

		public void unsetMonth() {
			__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __MONTH_ISSET_ID);
		}

		/**
		 * Returns true if field month is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetMonth() {
			return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __MONTH_ISSET_ID);
		}

		public void setMonthIsSet(boolean value) {
			__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __MONTH_ISSET_ID, value);
		}

		public long getYear() {
			return this.year;
		}

		public setDate_args setYear(long year) {
			this.year = year;
			setYearIsSet(true);
			return this;
		}

		public void unsetYear() {
			__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __YEAR_ISSET_ID);
		}

		/**
		 * Returns true if field year is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetYear() {
			return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __YEAR_ISSET_ID);
		}

		public void setYearIsSet(boolean value) {
			__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __YEAR_ISSET_ID, value);
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case ID:
				if (value == null) {
					unsetId();
				} else {
					setId((java.lang.Long) value);
				}
				break;

			case DAY:
				if (value == null) {
					unsetDay();
				} else {
					setDay((java.lang.Long) value);
				}
				break;

			case MONTH:
				if (value == null) {
					unsetMonth();
				} else {
					setMonth((java.lang.Long) value);
				}
				break;

			case YEAR:
				if (value == null) {
					unsetYear();
				} else {
					setYear((java.lang.Long) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case ID:
				return getId();

			case DAY:
				return getDay();

			case MONTH:
				return getMonth();

			case YEAR:
				return getYear();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case ID:
				return isSetId();
			case DAY:
				return isSetDay();
			case MONTH:
				return isSetMonth();
			case YEAR:
				return isSetYear();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof setDate_args)
				return this.equals((setDate_args) that);
			return false;
		}

		public boolean equals(setDate_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_id = true;
			boolean that_present_id = true;
			if (this_present_id || that_present_id) {
				if (!(this_present_id && that_present_id))
					return false;
				if (this.id != that.id)
					return false;
			}

			boolean this_present_day = true;
			boolean that_present_day = true;
			if (this_present_day || that_present_day) {
				if (!(this_present_day && that_present_day))
					return false;
				if (this.day != that.day)
					return false;
			}

			boolean this_present_month = true;
			boolean that_present_month = true;
			if (this_present_month || that_present_month) {
				if (!(this_present_month && that_present_month))
					return false;
				if (this.month != that.month)
					return false;
			}

			boolean this_present_year = true;
			boolean that_present_year = true;
			if (this_present_year || that_present_year) {
				if (!(this_present_year && that_present_year))
					return false;
				if (this.year != that.year)
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(id);

			hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(day);

			hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(month);

			hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(year);

			return hashCode;
		}

		@Override
		public int compareTo(setDate_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetId()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetDay()).compareTo(other.isSetDay());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetDay()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.day, other.day);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetMonth()).compareTo(other.isSetMonth());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetMonth()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.month, other.month);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetYear()).compareTo(other.isSetYear());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetYear()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.year, other.year);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("setDate_args(");
			boolean first = true;

			sb.append("id:");
			sb.append(this.id);
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("day:");
			sb.append(this.day);
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("month:");
			sb.append(this.month);
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("year:");
			sb.append(this.year);
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization is
				// wacky, and doesn't call the default constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class setDate_argsStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public setDate_argsStandardScheme getScheme() {
				return new setDate_argsStandardScheme();
			}
		}

		private static class setDate_argsStandardScheme extends org.apache.thrift.scheme.StandardScheme<setDate_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, setDate_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // ID
						if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
							struct.id = iprot.readI64();
							struct.setIdIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // DAY
						if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
							struct.day = iprot.readI64();
							struct.setDayIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 3: // MONTH
						if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
							struct.month = iprot.readI64();
							struct.setMonthIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 4: // YEAR
						if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
							struct.year = iprot.readI64();
							struct.setYearIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, setDate_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldBegin(ID_FIELD_DESC);
				oprot.writeI64(struct.id);
				oprot.writeFieldEnd();
				oprot.writeFieldBegin(DAY_FIELD_DESC);
				oprot.writeI64(struct.day);
				oprot.writeFieldEnd();
				oprot.writeFieldBegin(MONTH_FIELD_DESC);
				oprot.writeI64(struct.month);
				oprot.writeFieldEnd();
				oprot.writeFieldBegin(YEAR_FIELD_DESC);
				oprot.writeI64(struct.year);
				oprot.writeFieldEnd();
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class setDate_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public setDate_argsTupleScheme getScheme() {
				return new setDate_argsTupleScheme();
			}
		}

		private static class setDate_argsTupleScheme extends org.apache.thrift.scheme.TupleScheme<setDate_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, setDate_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetId()) {
					optionals.set(0);
				}
				if (struct.isSetDay()) {
					optionals.set(1);
				}
				if (struct.isSetMonth()) {
					optionals.set(2);
				}
				if (struct.isSetYear()) {
					optionals.set(3);
				}
				oprot.writeBitSet(optionals, 4);
				if (struct.isSetId()) {
					oprot.writeI64(struct.id);
				}
				if (struct.isSetDay()) {
					oprot.writeI64(struct.day);
				}
				if (struct.isSetMonth()) {
					oprot.writeI64(struct.month);
				}
				if (struct.isSetYear()) {
					oprot.writeI64(struct.year);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, setDate_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(4);
				if (incoming.get(0)) {
					struct.id = iprot.readI64();
					struct.setIdIsSet(true);
				}
				if (incoming.get(1)) {
					struct.day = iprot.readI64();
					struct.setDayIsSet(true);
				}
				if (incoming.get(2)) {
					struct.month = iprot.readI64();
					struct.setMonthIsSet(true);
				}
				if (incoming.get(3)) {
					struct.year = iprot.readI64();
					struct.setYearIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class setDate_result implements org.apache.thrift.TBase<setDate_result, setDate_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<setDate_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"setDate_result");

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setDate_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setDate_resultTupleSchemeFactory();

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			;

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setDate_result.class, metaDataMap);
		}

		public setDate_result() {
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public setDate_result(setDate_result other) {
		}

		public setDate_result deepCopy() {
			return new setDate_result(this);
		}

		@Override
		public void clear() {
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof setDate_result)
				return this.equals((setDate_result) that);
			return false;
		}

		public boolean equals(setDate_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			return hashCode;
		}

		@Override
		public int compareTo(setDate_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("setDate_result(");
			boolean first = true;

			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class setDate_resultStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public setDate_resultStandardScheme getScheme() {
				return new setDate_resultStandardScheme();
			}
		}

		private static class setDate_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<setDate_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, setDate_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, setDate_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class setDate_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public setDate_resultTupleScheme getScheme() {
				return new setDate_resultTupleScheme();
			}
		}

		private static class setDate_resultTupleScheme extends org.apache.thrift.scheme.TupleScheme<setDate_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, setDate_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, setDate_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class setCoordinates_args
			implements org.apache.thrift.TBase<setCoordinates_args, setCoordinates_args._Fields>, java.io.Serializable,
			Cloneable, Comparable<setCoordinates_args> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"setCoordinates_args");

		private static final org.apache.thrift.protocol.TField ID_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"id", org.apache.thrift.protocol.TType.I64, (short) 1);
		private static final org.apache.thrift.protocol.TField LATITUDE_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"latitude", org.apache.thrift.protocol.TType.DOUBLE, (short) 2);
		private static final org.apache.thrift.protocol.TField LONGITUDE_FIELD_DESC = new org.apache.thrift.protocol.TField(
				"longitude", org.apache.thrift.protocol.TType.DOUBLE, (short) 3);

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setCoordinates_argsStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setCoordinates_argsTupleSchemeFactory();

		public long id; // required
		public double latitude; // required
		public double longitude; // required

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			ID((short) 1, "id"), LATITUDE((short) 2, "latitude"), LONGITUDE((short) 3, "longitude");

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				case 1: // ID
					return ID;
				case 2: // LATITUDE
					return LATITUDE;
				case 3: // LONGITUDE
					return LONGITUDE;
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		// isset id assignments
		private static final int __ID_ISSET_ID = 0;
		private static final int __LATITUDE_ISSET_ID = 1;
		private static final int __LONGITUDE_ISSET_ID = 2;
		private byte __isset_bitfield = 0;
		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			tmpMap.put(_Fields.ID,
					new org.apache.thrift.meta_data.FieldMetaData("id", org.apache.thrift.TFieldRequirementType.DEFAULT,
							new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
			tmpMap.put(_Fields.LATITUDE, new org.apache.thrift.meta_data.FieldMetaData("latitude",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
			tmpMap.put(_Fields.LONGITUDE, new org.apache.thrift.meta_data.FieldMetaData("longitude",
					org.apache.thrift.TFieldRequirementType.DEFAULT,
					new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setCoordinates_args.class, metaDataMap);
		}

		public setCoordinates_args() {
		}

		public setCoordinates_args(long id, double latitude, double longitude) {
			this();
			this.id = id;
			setIdIsSet(true);
			this.latitude = latitude;
			setLatitudeIsSet(true);
			this.longitude = longitude;
			setLongitudeIsSet(true);
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public setCoordinates_args(setCoordinates_args other) {
			__isset_bitfield = other.__isset_bitfield;
			this.id = other.id;
			this.latitude = other.latitude;
			this.longitude = other.longitude;
		}

		public setCoordinates_args deepCopy() {
			return new setCoordinates_args(this);
		}

		@Override
		public void clear() {
			setIdIsSet(false);
			this.id = 0;
			setLatitudeIsSet(false);
			this.latitude = 0.0;
			setLongitudeIsSet(false);
			this.longitude = 0.0;
		}

		public long getId() {
			return this.id;
		}

		public setCoordinates_args setId(long id) {
			this.id = id;
			setIdIsSet(true);
			return this;
		}

		public void unsetId() {
			__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __ID_ISSET_ID);
		}

		/**
		 * Returns true if field id is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetId() {
			return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __ID_ISSET_ID);
		}

		public void setIdIsSet(boolean value) {
			__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __ID_ISSET_ID, value);
		}

		public double getLatitude() {
			return this.latitude;
		}

		public setCoordinates_args setLatitude(double latitude) {
			this.latitude = latitude;
			setLatitudeIsSet(true);
			return this;
		}

		public void unsetLatitude() {
			__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LATITUDE_ISSET_ID);
		}

		/**
		 * Returns true if field latitude is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetLatitude() {
			return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LATITUDE_ISSET_ID);
		}

		public void setLatitudeIsSet(boolean value) {
			__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LATITUDE_ISSET_ID, value);
		}

		public double getLongitude() {
			return this.longitude;
		}

		public setCoordinates_args setLongitude(double longitude) {
			this.longitude = longitude;
			setLongitudeIsSet(true);
			return this;
		}

		public void unsetLongitude() {
			__isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LONGITUDE_ISSET_ID);
		}

		/**
		 * Returns true if field longitude is set (has been assigned a value) and false
		 * otherwise
		 */
		public boolean isSetLongitude() {
			return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LONGITUDE_ISSET_ID);
		}

		public void setLongitudeIsSet(boolean value) {
			__isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LONGITUDE_ISSET_ID, value);
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			case ID:
				if (value == null) {
					unsetId();
				} else {
					setId((java.lang.Long) value);
				}
				break;

			case LATITUDE:
				if (value == null) {
					unsetLatitude();
				} else {
					setLatitude((java.lang.Double) value);
				}
				break;

			case LONGITUDE:
				if (value == null) {
					unsetLongitude();
				} else {
					setLongitude((java.lang.Double) value);
				}
				break;

			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			case ID:
				return getId();

			case LATITUDE:
				return getLatitude();

			case LONGITUDE:
				return getLongitude();

			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			case ID:
				return isSetId();
			case LATITUDE:
				return isSetLatitude();
			case LONGITUDE:
				return isSetLongitude();
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof setCoordinates_args)
				return this.equals((setCoordinates_args) that);
			return false;
		}

		public boolean equals(setCoordinates_args that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			boolean this_present_id = true;
			boolean that_present_id = true;
			if (this_present_id || that_present_id) {
				if (!(this_present_id && that_present_id))
					return false;
				if (this.id != that.id)
					return false;
			}

			boolean this_present_latitude = true;
			boolean that_present_latitude = true;
			if (this_present_latitude || that_present_latitude) {
				if (!(this_present_latitude && that_present_latitude))
					return false;
				if (this.latitude != that.latitude)
					return false;
			}

			boolean this_present_longitude = true;
			boolean that_present_longitude = true;
			if (this_present_longitude || that_present_longitude) {
				if (!(this_present_longitude && that_present_longitude))
					return false;
				if (this.longitude != that.longitude)
					return false;
			}

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(id);

			hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(latitude);

			hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(longitude);

			return hashCode;
		}

		@Override
		public int compareTo(setCoordinates_args other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			lastComparison = java.lang.Boolean.valueOf(isSetId()).compareTo(other.isSetId());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetId()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.id, other.id);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetLatitude()).compareTo(other.isSetLatitude());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetLatitude()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.latitude, other.latitude);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			lastComparison = java.lang.Boolean.valueOf(isSetLongitude()).compareTo(other.isSetLongitude());
			if (lastComparison != 0) {
				return lastComparison;
			}
			if (isSetLongitude()) {
				lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.longitude, other.longitude);
				if (lastComparison != 0) {
					return lastComparison;
				}
			}
			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("setCoordinates_args(");
			boolean first = true;

			sb.append("id:");
			sb.append(this.id);
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("latitude:");
			sb.append(this.latitude);
			first = false;
			if (!first)
				sb.append(", ");
			sb.append("longitude:");
			sb.append(this.longitude);
			first = false;
			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				// it doesn't seem like you should have to do this, but java serialization is
				// wacky, and doesn't call the default constructor.
				__isset_bitfield = 0;
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class setCoordinates_argsStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public setCoordinates_argsStandardScheme getScheme() {
				return new setCoordinates_argsStandardScheme();
			}
		}

		private static class setCoordinates_argsStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<setCoordinates_args> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, setCoordinates_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					case 1: // ID
						if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
							struct.id = iprot.readI64();
							struct.setIdIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 2: // LATITUDE
						if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
							struct.latitude = iprot.readDouble();
							struct.setLatitudeIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					case 3: // LONGITUDE
						if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
							struct.longitude = iprot.readDouble();
							struct.setLongitudeIsSet(true);
						} else {
							org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
						}
						break;
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, setCoordinates_args struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldBegin(ID_FIELD_DESC);
				oprot.writeI64(struct.id);
				oprot.writeFieldEnd();
				oprot.writeFieldBegin(LATITUDE_FIELD_DESC);
				oprot.writeDouble(struct.latitude);
				oprot.writeFieldEnd();
				oprot.writeFieldBegin(LONGITUDE_FIELD_DESC);
				oprot.writeDouble(struct.longitude);
				oprot.writeFieldEnd();
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class setCoordinates_argsTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public setCoordinates_argsTupleScheme getScheme() {
				return new setCoordinates_argsTupleScheme();
			}
		}

		private static class setCoordinates_argsTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<setCoordinates_args> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, setCoordinates_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet optionals = new java.util.BitSet();
				if (struct.isSetId()) {
					optionals.set(0);
				}
				if (struct.isSetLatitude()) {
					optionals.set(1);
				}
				if (struct.isSetLongitude()) {
					optionals.set(2);
				}
				oprot.writeBitSet(optionals, 3);
				if (struct.isSetId()) {
					oprot.writeI64(struct.id);
				}
				if (struct.isSetLatitude()) {
					oprot.writeDouble(struct.latitude);
				}
				if (struct.isSetLongitude()) {
					oprot.writeDouble(struct.longitude);
				}
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, setCoordinates_args struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
				java.util.BitSet incoming = iprot.readBitSet(3);
				if (incoming.get(0)) {
					struct.id = iprot.readI64();
					struct.setIdIsSet(true);
				}
				if (incoming.get(1)) {
					struct.latitude = iprot.readDouble();
					struct.setLatitudeIsSet(true);
				}
				if (incoming.get(2)) {
					struct.longitude = iprot.readDouble();
					struct.setLongitudeIsSet(true);
				}
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

	public static class setCoordinates_result
			implements org.apache.thrift.TBase<setCoordinates_result, setCoordinates_result._Fields>,
			java.io.Serializable, Cloneable, Comparable<setCoordinates_result> {
		private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct(
				"setCoordinates_result");

		private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new setCoordinates_resultStandardSchemeFactory();
		private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new setCoordinates_resultTupleSchemeFactory();

		/**
		 * The set of fields this struct contains, along with convenience methods for
		 * finding and manipulating them.
		 */
		public enum _Fields implements org.apache.thrift.TFieldIdEnum {
			;

			private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

			static {
				for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
					byName.put(field.getFieldName(), field);
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, or null if its not found.
			 */
			public static _Fields findByThriftId(int fieldId) {
				switch (fieldId) {
				default:
					return null;
				}
			}

			/**
			 * Find the _Fields constant that matches fieldId, throwing an exception if it
			 * is not found.
			 */
			public static _Fields findByThriftIdOrThrow(int fieldId) {
				_Fields fields = findByThriftId(fieldId);
				if (fields == null)
					throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
				return fields;
			}

			/**
			 * Find the _Fields constant that matches name, or null if its not found.
			 */
			public static _Fields findByName(java.lang.String name) {
				return byName.get(name);
			}

			private final short _thriftId;
			private final java.lang.String _fieldName;

			_Fields(short thriftId, java.lang.String fieldName) {
				_thriftId = thriftId;
				_fieldName = fieldName;
			}

			public short getThriftFieldId() {
				return _thriftId;
			}

			public java.lang.String getFieldName() {
				return _fieldName;
			}
		}

		public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
		static {
			java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(
					_Fields.class);
			metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
			org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(setCoordinates_result.class, metaDataMap);
		}

		public setCoordinates_result() {
		}

		/**
		 * Performs a deep copy on <i>other</i>.
		 */
		public setCoordinates_result(setCoordinates_result other) {
		}

		public setCoordinates_result deepCopy() {
			return new setCoordinates_result(this);
		}

		@Override
		public void clear() {
		}

		public void setFieldValue(_Fields field, java.lang.Object value) {
			switch (field) {
			}
		}

		public java.lang.Object getFieldValue(_Fields field) {
			switch (field) {
			}
			throw new java.lang.IllegalStateException();
		}

		/**
		 * Returns true if field corresponding to fieldID is set (has been assigned a
		 * value) and false otherwise
		 */
		public boolean isSet(_Fields field) {
			if (field == null) {
				throw new java.lang.IllegalArgumentException();
			}

			switch (field) {
			}
			throw new java.lang.IllegalStateException();
		}

		@Override
		public boolean equals(java.lang.Object that) {
			if (that == null)
				return false;
			if (that instanceof setCoordinates_result)
				return this.equals((setCoordinates_result) that);
			return false;
		}

		public boolean equals(setCoordinates_result that) {
			if (that == null)
				return false;
			if (this == that)
				return true;

			return true;
		}

		@Override
		public int hashCode() {
			int hashCode = 1;

			return hashCode;
		}

		@Override
		public int compareTo(setCoordinates_result other) {
			if (!getClass().equals(other.getClass())) {
				return getClass().getName().compareTo(other.getClass().getName());
			}

			int lastComparison = 0;

			return 0;
		}

		public _Fields fieldForId(int fieldId) {
			return _Fields.findByThriftId(fieldId);
		}

		public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
			scheme(iprot).read(iprot, this);
		}

		public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
			scheme(oprot).write(oprot, this);
		}

		@Override
		public java.lang.String toString() {
			java.lang.StringBuilder sb = new java.lang.StringBuilder("setCoordinates_result(");
			boolean first = true;

			sb.append(")");
			return sb.toString();
		}

		public void validate() throws org.apache.thrift.TException {
			// check for required fields
			// check for sub-struct validity
		}

		private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
			try {
				write(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(out)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private void readObject(java.io.ObjectInputStream in)
				throws java.io.IOException, java.lang.ClassNotFoundException {
			try {
				read(new org.apache.thrift.protocol.TCompactProtocol(
						new org.apache.thrift.transport.TIOStreamTransport(in)));
			} catch (org.apache.thrift.TException te) {
				throw new java.io.IOException(te);
			}
		}

		private static class setCoordinates_resultStandardSchemeFactory
				implements org.apache.thrift.scheme.SchemeFactory {
			public setCoordinates_resultStandardScheme getScheme() {
				return new setCoordinates_resultStandardScheme();
			}
		}

		private static class setCoordinates_resultStandardScheme
				extends org.apache.thrift.scheme.StandardScheme<setCoordinates_result> {

			public void read(org.apache.thrift.protocol.TProtocol iprot, setCoordinates_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TField schemeField;
				iprot.readStructBegin();
				while (true) {
					schemeField = iprot.readFieldBegin();
					if (schemeField.type == org.apache.thrift.protocol.TType.STOP) {
						break;
					}
					switch (schemeField.id) {
					default:
						org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
					}
					iprot.readFieldEnd();
				}
				iprot.readStructEnd();

				// check for required fields of primitive type, which can't be checked in the
				// validate method
				struct.validate();
			}

			public void write(org.apache.thrift.protocol.TProtocol oprot, setCoordinates_result struct)
					throws org.apache.thrift.TException {
				struct.validate();

				oprot.writeStructBegin(STRUCT_DESC);
				oprot.writeFieldStop();
				oprot.writeStructEnd();
			}

		}

		private static class setCoordinates_resultTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
			public setCoordinates_resultTupleScheme getScheme() {
				return new setCoordinates_resultTupleScheme();
			}
		}

		private static class setCoordinates_resultTupleScheme
				extends org.apache.thrift.scheme.TupleScheme<setCoordinates_result> {

			@Override
			public void write(org.apache.thrift.protocol.TProtocol prot, setCoordinates_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			}

			@Override
			public void read(org.apache.thrift.protocol.TProtocol prot, setCoordinates_result struct)
					throws org.apache.thrift.TException {
				org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
			}
		}

		private static <S extends org.apache.thrift.scheme.IScheme> S scheme(
				org.apache.thrift.protocol.TProtocol proto) {
			return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY
					: TUPLE_SCHEME_FACTORY).getScheme();
		}
	}

}
